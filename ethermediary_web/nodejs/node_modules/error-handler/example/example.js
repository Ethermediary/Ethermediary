var handleErrors = require('../errorHandler.js'),
    http = require('http'),
    bunyan = require('bunyan'),
    cluster = require('cluster')

// NOTE: in real life, you'd probably want to put the master and worker
// scripts in separate files.

if (cluster.isMaster) {

  // Spawn a worker.
  cluster.fork()

  // We'll use bunyan for logging.
  var logger = bunyan.createLogger({
    name: 'example',
    level: 'trace',
    master: true
  })

  // Spawn another worker when one dies.
  cluster.on('exit', function (worker, code, signal) {
    logger.warn('Worker ' + worker.id + ' died.')

    cluster.fork()
  })

} else if (cluster.isWorker) {

  var logger = bunyan.createLogger({
    name: 'example',
    level: 'trace'
  })

  // The error handling function. Maybe render or send an error page
  // in here. At any rate, please do better than this.
  function errorHandler (req, res, err) {
    req.log.error({ err: err }, err.stack)

    res.writeHead(500, {'Content-Type': 'text/html'})
    res.end(
      '<html>' +
        '<head><title>Error</title></head>' +
        '<body><p style="white-space: pre">' + err.stack + '</p></body>' +
      '</html>'
    )
  }

  var server = http.createServer(function (req, res) {

    req.log = res.log = logger.child({
        serializers: bunyan.stdSerializers,
    })

    // This takes care of errors. You'll want to call this ASAP.
    handleErrors(req, res, errorHandler)

    /**
     *
     * Put your application logic here.
     *
     */

    // For illustration purposes only.
    throw new Error('Some error from something.')
  })

  server.listen(3000, function () {
    logger.info('Worker ' + cluster.worker.id + ' listening.')
  })
}