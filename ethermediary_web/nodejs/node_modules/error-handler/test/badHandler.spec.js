var ErrorHandler = require('../errorHandler.js'),
    http = require('http'),
    request = require('request')

describe('The error handler should', function () {
  var nOfErrors = 0,
      server,
      closing

  // Simplify requests.
  function req (url, cb) {
    request('http://localhost:3000' + url, cb)
  }

  it('setup properly.', function (done) {

    // We want to mute console.error( ), since that's what error-handler
    // falls back to when the error handling function fails.
    console.error = function () {}

    // Set up basic server.
    server = http.createServer(function (req, res) {
      ErrorHandler(req, res, function (req, res, err) {

        nOfErrors += 1

        throw new Error('Oh noes! The error handler failed too.')
      }, 'Not fatal')

      function complain () {
        throw new Error('A loud complaint.')
      }

      switch (req.url) {
        case '/timeout':
          setTimeout(complain, 100)

          // Jasmine messes with setTimeout.
          jasmine.clock().tick(101)
          break
        case '/nextTick':
          return process.nextTick(complain)
        case '/file':
          return fs.readFile(__filename, complain)
        case '/allGood':
          return res.end('OK')
        default:
          return complain()
      }
    })

    server.listen(3000, function () {
      expect(server.address().port).toBe(3000)

      server.on('close', function () {
        if (!closing) throw new Error('Server crashed.')
      })

      done()
    })
  })

  it('should not fail if the error handling function throws (1).', function (done) {
    req('/', function (err, res, body) {
      if (err) throw err
      expect(err).toBe(null)
      expect(res.statusCode).toBe(500)
      expect(body).toEqual('Server error.\n')

      expect(nOfErrors).toEqual(1)

      done()
    })
  })

  it('should not fail if the error handling function throws (2).', function (done) {
    req('/timeout', function (err, res, body) {
      if (err) throw err
      expect(err).toBe(null)
      expect(res.statusCode).toBe(500)
      expect(body).toEqual('Server error.\n')

      expect(nOfErrors).toEqual(2)

      done()
    })
  })

  it('should not fail if the error handling function throws (3).', function (done) {
    req('/nextTick', function (err, res, body) {
      if (err) throw err
      expect(err).toBe(null)
      expect(res.statusCode).toBe(500)
      expect(body).toEqual('Server error.\n')

      expect(nOfErrors).toEqual(3)

      done()
    })
  })

  it('should not fail if the error handling function throws (4).', function (done) {
    req('/file', function (err, res, body) {
      if (err) throw err
      expect(err).toBe(null)
      expect(res.statusCode).toBe(500)
      expect(body).toEqual('Server error.\n')

      expect(nOfErrors).toEqual(4)

      done()
    })
  })

  it('shut down fine.', function (done) {
    closing = true

    server.close()

    expect(server.address()).toBe(null)
    done()
  })
})