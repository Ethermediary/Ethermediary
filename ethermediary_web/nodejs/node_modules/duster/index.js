'use strict';

var async = require('async');
var path = require('path');
var fs = require('fs');
var dust = require('dustjs-helpers');
var glob = require('glob');

function prime(locations, cb) {
  // always work with an array
  if (!Array.isArray(locations)) {
    locations = [{
      path: locations
    }];
  }

  locations.forEach(function(location) {
    location.namespace = location.namespace || '';
    var fn = [];
    glob('**/*.dust', {
      cwd: location.path
    }, function(err, files) {
      if (err) {
        return cb(err);
      }
      files.forEach(function(file) {
        file = path.join(path.join(location.path, file));
        fn.push(function(cb) {
          fs.readFile(file, 'utf8', function(err, src) {
            if (err) {
              return cb(err);
            }
            dust.loadSource(dust.compile(
              src,
              location.namespace + path.relative(location.path, file).slice(0, -5)
            ));
            cb();
          });
        });
      });

      async.parallelLimit(fn, 10, function(err, res) {
        if (err) {
          return cb(err);
        }
        cb(null);
      });
    });
  });
}

module.exports = {
  prime: prime,
  dust: dust
};
